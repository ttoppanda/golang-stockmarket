#!/usr/bin/env bash

goservices="ledger orderbook ticker"
containers="web_lb web ledger orderbook ticker"
kubeservices="mongo redis orderbook web-lb web ticker ledger"

source mock

# TRADE
if [[ $1 == "trade" ]]; then
  time trade
fi

# TEST
if [[ $1 == "test" ]]; then
  for service in $goservices; do
    cd $service && go test && cd ..
  done
fi

# BUILD ALL PRODUCTION AND PUSH TO DOCKER HUB
if [ $1 == "build" ] && [ $2 == "all" ]; then
    docker-compose -f docker-compose.build.prod.yml build

    for container in $containers; do
        docker push nickstefan/market_$container
    done
fi

# BUILD PRODUCTION AND PUSH TO DOCKER HUB
if [ $1 == "build" ] && [ -z "$2" ]; then
    docker-compose -f docker-compose.build.prod.yml build
    docker push nickstefan/market_$2
fi


# CONFIGURE ECS
if [ $1 == "ecs" ] && [ $2 == "configure" ]; then
    ecs-cli configure \
    --region us-west-2 \
    --profile default \
    --cluster clusterfornick
fi

# CREATE EC2 CLUSTER FOR USE WITH ECS
if [ $1 == "ecs" ] && [ $2 == "up" ]; then
    ecs-cli up \
    --keypair keyfornick \
    --capability-iam \
    --size 1 \
    --instance-type m4.2xlarge
fi

# DEPLOY CONTAINERS TO ECS
if [ $1 == "ecs" ] && [ $2 == "compose" ]; then
    ecs-cli compose --file docker-compose.aws.ecs.yml up
fi

# DOWN CONTAINERS TO ECS
if [ $1 == "ecs" ] && [ $2 == "down" ]; then
    ecs-cli compose --file docker-compose.aws.ecs.yml down
fi

# DOWN CONTAINERS AND CLUSTER
if [ $1 == "ecs" ] && [ $2 == "cluster" ] && [ $3 == "down" ]; then
    ecs-cli down --force
fi


# CREATE EC2 CLUSTER FOR KUBERNETES
if [ $1 == "kube" ] && [ $2 == "up" ]; then
    source ./kubernetes/kubeconf
    $HOME/kubernetes/cluster/kube-up.sh
fi

# cluster status
# kubectl cluster-info

# kubernetes cluster admin and password:
# kubectl config view

if [ $1 == "kube" ] && [ $2 == deploy ]; then
    for kube in $kubeservices; do
        kubectl create -f ./kubernetes/$kube-rc.yaml
        kubectl create -f ./kubernetes/$kube-svc.yaml
    done
fi

# get aws ingress load balancer IP (e.g. public address)
# kubectl describe service web-lb

if [ $1 == "kube" ] && [ $2 == delete ]; then
    for kube in $kubeservices; do
        kubectl delete service $kube
        kubectl delete rc $kube
    done
fi

if [ $1 == "kube" ] && [ $2 == "down" ]; then
    source ./kubernetes/kubeconf
    $HOME/kubernetes/cluster/kube-down.sh
fi

# ssh to master node
# ssh -i ~/.ssh/kube_aws_rsa admin@<PUBLIC_DNS>
